/////////////////////////////////////////
// DO NOT MODIFY - This was auto-generated by a tool.

declare var $dataActors: ActorData[];
declare var $dataAnimations: AnimationData[];
declare var $dataArmors: ArmorData[];
declare var $dataClasses: ClassData[];
declare var $dataCommonEvents: CommonEventData[];
declare var $dataEnemies: EnemyData[];
declare var $dataItems: ItemData[];
declare var $dataMap: MapData;
declare var $dataMapInfos: MapInfoData[];
declare var $dataSkills: SkillData[];
declare var $dataStates: StateData[];
declare var $dataSystem: SystemData;
declare var $dataTilesets: TilesetData[];
declare var $dataTroops: TroopData[];
declare var $dataWeapons: WeaponData[];
declare var $gameActors: Game_Actors;
declare var $gameMap: Game_Map;
declare var $gameMessage: Game_Message;
declare var $gameParty: Game_Party;
declare var $gamePlayer: Game_Player;
declare var $gameScreen: Game_Screen;
declare var $gameSelfSwitches: Game_SelfSwitches;
declare var $gameSwitches: Game_Switches;
declare var $gameSystem: Game_System;
declare var $gameTemp: Game_Temp;
declare var $gameTimer: Game_Timer;
declare var $gameTroop: Game_Troop;
declare var $gameVariables: Game_Variables;
declare var $testEvent;

/* The static class that manages the database and game objects. */
declare class DataManager {
    constructor();
    static _databaseFiles: string;
    static _errorUrl;
    static _globalId: string;
    static _lastAccessedId: number;
    static checkError();
    static createGameObjects();
    static extractMetadata(data);
    static extractSaveContents(contents);
    static isAnySavefileExists();
    static isArmor(item);
    static isBattleTest();
    static isDatabaseLoaded();
    static isEventTest();
    static isItem(item);
    static isMapLoaded();
    static isSkill(item);
    static isThisGameFile(savefileId);
    static isWeapon(item);
    static lastAccessedSavefileId();
    static latestSavefileId();
    static loadAllSavefileImages();
    static loadDatabase();
    static loadDataFile(name, src);
    static loadGame(savefileId);
    static loadGameWithoutRescue(savefileId);
    static loadGlobalInfo();
    static loadMapData(mapId);
    static loadSavefileImages(info);
    static loadSavefileInfo(savefileId);
    static makeEmptyMap();
    static makeSaveContents();
    static makeSavefileInfo();
    static maxSavefiles();
    static onLoad(object);
    static saveGame(savefileId);
    static saveGameWithoutRescue(savefileId);
    static saveGlobalInfo(info);
    static selectSavefileForNewGame();
    static setupBattleTest();
    static setupEventTest();
    static setupNewGame();
}

/* The static class that manages storage for saving game data. */
declare class StorageManager {
    constructor();
    static backup(savefileId);
    static backupExists(savefileId);
    static cleanBackup(savefileId);
    static exists(savefileId);
    static isLocalMode();
    static load(savefileId);
    static loadFromLocalBackupFile(savefileId);
    static loadFromLocalFile(savefileId);
    static loadFromWebStorage(savefileId);
    static loadFromWebStorageBackup(savefileId);
    static localFileBackupExists(savefileId);
    static localFileDirectoryPath();
    static localFileExists(savefileId);
    static localFilePath(savefileId);
    static remove(savefileId);
    static removeLocalFile(savefileId);
    static removeWebStorage(savefileId);
    static restoreBackup(savefileId);
    static save(savefileId, json);
    static saveToLocalFile(savefileId, json);
    static saveToWebStorage(savefileId, json);
    static webStorageBackupExists(savefileId);
    static webStorageExists(savefileId);
    static webStorageKey(savefileId);
}

/* The static class that loads images, creates bitmap objects and retains them. */
declare class ImageManager {
    constructor();
    static _imageCache: ImageCache;
    static _requestQueue: RequestQueue;
    static cache: CacheMap;
    static _generateCacheKey(path, hue?);
    static clear();
    static clearRequest();
    static isBigCharacter(filename);
    static isObjectCharacter(filename);
    static isReady();
    static isZeroParallax(filename);
    static loadAnimation(filename, hue?);
    static loadBattleback1(filename, hue?);
    static loadBattleback2(filename, hue?);
    static loadBitmap(folder, filename, hue?, smooth?);
    static loadCharacter(filename, hue?);
    static loadEmptyBitmap();
    static loadEnemy(filename, hue?);
    static loadFace(filename, hue?);
    static loadNormalBitmap(path, hue?);
    static loadParallax(filename, hue?);
    static loadPicture(filename, hue?);
    static loadSvActor(filename, hue?);
    static loadSvEnemy(filename, hue?);
    static loadSystem(filename, hue?);
    static loadTileset(filename, hue?);
    static loadTitle1(filename, hue?);
    static loadTitle2(filename, hue?);
    static releaseReservation(reservationId);
    static requestAnimation(filename, hue?);
    static requestBattleback1(filename, hue?);
    static requestBattleback2(filename, hue?);
    static requestBitmap(folder, filename, hue?, smooth?);
    static requestCharacter(filename, hue?);
    static requestEnemy(filename, hue?);
    static requestFace(filename, hue?);
    static requestNormalBitmap(path, hue?);
    static requestParallax(filename, hue?);
    static requestPicture(filename, hue?);
    static requestSvActor(filename, hue?);
    static requestSvEnemy(filename, hue?);
    static requestSystem(filename, hue?);
    static requestTileset(filename, hue?);
    static requestTitle1(filename, hue?);
    static requestTitle2(filename, hue?);
    static reserveAnimation(filename, hue?, reservationId?);
    static reserveBattleback1(filename, hue?, reservationId?);
    static reserveBattleback2(filename, hue?, reservationId?);
    static reserveBitmap(folder, filename, hue?, smooth?, reservationId?);
    static reserveCharacter(filename, hue?, reservationId?);
    static reserveEnemy(filename, hue?, reservationId?);
    static reserveFace(filename, hue?, reservationId?);
    static reserveNormalBitmap(path, hue?, reservationId?);
    static reserveParallax(filename, hue?, reservationId?);
    static reservePicture(filename, hue?, reservationId?);
    static reserveSvActor(filename, hue?, reservationId?);
    static reserveSvEnemy(filename, hue?, reservationId?);
    static reserveSystem(filename, hue?, reservationId?);
    static reserveTileset(filename, hue?, reservationId?);
    static reserveTitle1(filename, hue?, reservationId?);
    static reserveTitle2(filename, hue?, reservationId?);
    static setDefaultReservationId(reservationId);
    static update();
}

/* The static class that handles BGM, BGS, ME and SE. */
declare class AudioManager {
    constructor();
    static _bgmBuffer;

    /* (min: 0, max: 1) */
    static _bgmVolume: number;
    static _bgsBuffer;

    /* (min: 0, max: 1) */
    static _bgsVolume: number;
    static _blobUrl;
    static _currentBgm;
    static _currentBgs;
    static _masterVolume: number;
    static _meBuffer;
    static _meVolume: number;
    static _path: string;
    static _replayFadeTime: number;
    static _seBuffers: any[];
    static _seVolume: number;
    static _staticBuffers: any[];
    static bgmVolume;
    static bgsVolume;
    static masterVolume;
    static meVolume;
    static seVolume;
    static audioFileExt();
    static checkErrors();
    static checkWebAudioError(webAudio);
    static createBuffer(folder, name);
    static createDecryptBuffer(url, bgm: AudioDefinition, pos?);
    static fadeInBgm(duration);
    static fadeInBgs(duration);
    static fadeOutBgm(duration);
    static fadeOutBgs(duration);
    static fadeOutMe(duration);
    static isCurrentBgm(bgm: AudioDefinition);
    static isCurrentBgs(bgs: AudioDefinition);
    static isStaticSe(se);
    static loadStaticSe(se);
    static makeEmptyAudioObject();
    static playBgm(bgm: AudioDefinition, pos?);
    static playBgs(bgs: AudioDefinition, pos?);
    static playEncryptedBgm(bgm: AudioDefinition, pos?);
    static playMe(me: AudioDefinition);
    static playSe(se);
    static playStaticSe(se);
    static replayBgm(bgm: AudioDefinition);
    static replayBgs(bgs: AudioDefinition);
    static saveBgm();
    static saveBgs();
    static shouldUseHtml5Audio();
    static stopAll();
    static stopBgm();
    static stopBgs();
    static stopMe();
    static stopSe();
    static updateBgmParameters(bgm: AudioDefinition);
    static updateBgsParameters(bgs: AudioDefinition);
    static updateBufferParameters(buffer, configVolume, audio);
    static updateCurrentBgm(bgm: AudioDefinition, pos?);
    static updateCurrentBgs(bgs: AudioDefinition, pos?);
    static updateMeParameters(me: AudioDefinition);
    static updateSeParameters(buffer, se);
}

/* The static class that manages the configuration data. */
declare class ConfigManager {
    constructor();
    static alwaysDash: boolean;
    static bgmVolume;
    static bgsVolume;
    static commandRemember: boolean;
    static meVolume;
    static seVolume;
    static applyData(config);
    static load();
    static makeData();
    static readFlag(config, name);
    static readVolume(config, name);
    static save();
}

/* The static class that handles terms and messages. */
declare class TextManager {
    constructor();
    static actionFailure;
    static actorDamage;
    static actorDrain;
    static actorGain;
    static actorLoss;
    static actorNoDamage;
    static actorNoHit;
    static actorRecovery;
    static alwaysDash;
    static armor;
    static attack;
    static bgmVolume;
    static bgsVolume;
    static buffAdd;
    static buffRemove;
    static buy;
    static cancel;
    static clear;
    static commandRemember;
    static continue_;
    static counterAttack;
    static criticalToActor;
    static criticalToEnemy;
    static currencyUnit;
    static debuffAdd;
    static defeat;
    static emerge;
    static enemyDamage;
    static enemyDrain;
    static enemyGain;
    static enemyLoss;
    static enemyNoDamage;
    static enemyNoHit;
    static enemyRecovery;
    static equip;
    static equip2;
    static escape;
    static escapeFailure;
    static escapeStart;
    static evasion;
    static exp;
    static expA;
    static expNext;
    static expTotal;
    static fight;
    static file;
    static formation;
    static gameEnd;
    static guard;
    static hp;
    static hpA;
    static item;
    static keyItem;
    static level;
    static levelA;
    static levelUp;
    static loadMessage;
    static magicEvasion;
    static magicReflection;
    static meVolume;
    static mp;
    static mpA;
    static newGame;
    static obtainExp;
    static obtainGold;
    static obtainItem;
    static obtainSkill;
    static optimize;
    static options;
    static partyName;
    static possession;
    static preemptive;
    static save;
    static saveMessage;
    static sell;
    static seVolume;
    static skill;
    static status;
    static substitute;
    static surprise;
    static toTitle;
    static tp;
    static tpA;
    static useItem;
    static victory;
    static weapon;
    static basic(basicId);
    static command(commandId);
    static getter(method, param);
    static message(messageId);
    static param(paramId);
}

/* The static class that manages scene transitions. */
declare class SceneManager {
    constructor();
    static _accumulator: number;
    static _backgroundBitmap;
    static _boxHeight: number;
    static _boxWidth: number;
    static _deltaTime: number;
    static _exiting: boolean;
    static _nextScene;
    static _previousClass;
    static _scene;
    static _sceneStarted: boolean;
    static _screenHeight: number;
    static _screenWidth: number;
    static _stack: any[];
    static _stopped: boolean;

    /** Gets the current time in ms without on iOS Safari.
     * @private
    */
    static _getTimeInMsWithoutMobileSafari();
    static backgroundBitmap();
    static catchException(e);
    static changeScene();
    static checkFileAccess();
    static checkPluginErrors();
    static checkWebGL();
    static clearStack();
    static exit();
    static goto(sceneClass);
    static initAudio();
    static initGraphics();
    static initialize();
    static initInput();
    static initNwjs();
    static isCurrentSceneBusy();
    static isCurrentSceneStarted();
    static isNextScene(sceneClass);
    static isPreviousScene(sceneClass);
    static isSceneChanging();
    static onError(e);
    static onKeyDown(event);
    static onSceneCreate();
    static onSceneLoading();
    static onSceneStart();
    static pop();
    static preferableRendererType();
    static prepareNextScene();
    static push(sceneClass);
    static renderScene();
    static requestUpdate();
    static resume();
    static run(sceneClass);
    static setupErrorHandlers();
    static shouldUseCanvasRenderer();
    static snap();
    static snapForBackground();
    static stop();
    static terminate();
    static tickEnd();
    static tickStart();
    static update();
    static updateInputData();
    static updateMain();
    static updateManagers();
    static updateScene();
}

/* The static class that manages battle progress. */
declare class BattleManager {
    constructor();
    static abort();
    static actor();
    static allBattleMembers();
    static applySubstitute(target);
    static canEscape();
    static canLose();
    static changeActor(newActorIndex, lastActorActionState);
    static checkAbort();
    static checkAbort2();
    static checkBattleEnd();
    static checkSubstitute(target);
    static clearActor();
    static displayDefeatMessage();
    static displayDropItems();
    static displayEscapeFailureMessage();
    static displayEscapeSuccessMessage();
    static displayExp();
    static displayGold();
    static displayRewards();
    static displayStartMessages();
    static displayVictoryMessage();
    static endAction();
    static endBattle(result);
    static endTurn();
    static forceAction(battler);
    static gainDropItems();
    static gainExp();
    static gainGold();
    static gainRewards();
    static getNextSubject();
    static initMembers();
    static inputtingAction();
    static invokeAction(subject, target);
    static invokeCounterAttack(subject, target);
    static invokeMagicReflection(subject, target);
    static invokeNormalAction(subject, target);
    static isAborting();
    static isActionForced();
    static isBattleEnd();
    static isBattleTest();
    static isBusy();
    static isEscaped();
    static isForcedTurn();
    static isInputting();
    static isInTurn();
    static isTurnEnd();
    static makeActionOrders();
    static makeEscapeRatio();
    static makeRewards();
    static onEncounter();
    static playBattleBgm();
    static playDefeatMe();
    static playVictoryMe();
    static processAbort();
    static processDefeat();
    static processEscape();
    static processForcedAction();
    static processTurn();
    static processVictory();
    static ratePreemptive();
    static rateSurprise();
    static refreshStatus();
    static replayBgmAndBgs();
    static saveBgmAndBgs();
    static selectNextCommand();
    static selectPreviousCommand();
    static setBattleTest(battleTest);
    static setEventCallback(callback);
    static setLogWindow(logWindow);
    static setSpriteset(spriteset);
    static setStatusWindow(statusWindow);
    static setup(troopId, canEscape, canLose);
    static startAction();
    static startBattle();
    static startInput();
    static startTurn();
    static update();
    static updateAction();
    static updateBattleEnd();
    static updateEvent();
    static updateEventMain();
    static updateTurn();
    static updateTurnEnd();
}

/* The static class that manages the plugins. */
declare class PluginManager {
    constructor();
    static _errorUrls: any[];
    static _parameters: object;
    static _path: string;
    static _scripts: any[];
    static checkErrors();
    static loadScript(name);
    static onError(e);
    static parameters(name);
    static setParameters(name, parameters);
    static setup(plugins);
}

/* The static class that plays sound effects defined in the database. */
declare class SoundManager {
    constructor();
    static loadSystemSound(n);
    static playActorCollapse();
    static playActorDamage();
    static playBattleStart();
    static playBossCollapse1();
    static playBossCollapse2();
    static playBuzzer();
    static playCancel();
    static playCursor();
    static playEnemyAttack();
    static playEnemyCollapse();
    static playEnemyDamage();
    static playEquip();
    static playEscape();
    static playEvasion();
    static playLoad();
    static playMagicEvasion();
    static playMiss();
    static playOk();
    static playRecovery();
    static playReflection();
    static playSave();
    static playShop();
    static playSystemSound(n);
    static playUseItem();
    static playUseSkill();
    static preloadImportantSounds();
}
