/////////////////////////////////////////
// DO NOT MODIFY - This was auto-generated by a tool.

/* The game object class for an enemy. */
declare class Game_Enemy extends Game_Battler {
    constructor(enemyId, x, y);
    battlerHue();
    battlerName();
    dropItemRate();
    enemy();
    enemyId();
    exp();
    friendsUnit();
    gold();
    index();
    initialize(enemyId?, x?, y?);
    initMembers();
    isActionValid(action);
    isBattleMember();
    isEnemy();
    isLetterEmpty();
    isSpriteVisible();
    itemObject(kind, dataId);
    makeActions();
    makeDropItems();
    meetsCondition(action);
    meetsHpCondition(param1, param2);
    meetsMpCondition(param1, param2);
    meetsPartyLevelCondition(param);
    meetsStateCondition(param);
    meetsSwitchCondition(param);
    meetsTurnCondition(param1, param2);
    name();
    opponentsUnit();
    originalName();
    paramBase(paramId);
    performAction(action);
    performActionEnd();
    performActionStart(action);
    performCollapse();
    performDamage();
    screenX();
    screenY();
    selectAction(actionList, ratingZero);
    selectAllActions(actionList);
    setLetter(letter);
    setPlural(plural);
    setup(enemyId, x, y);
    traitObjects();
    transform(enemyId);
}

/* The game object class for temporary data that is not included in save data. */
declare class Game_Temp {
    constructor();
    clearCommonEvent();
    clearDestination();
    destinationX();
    destinationY();
    initialize();
    isCommonEventReserved();
    isDestinationValid();
    isPlaytest();
    reserveCommonEvent(commonEventId);
    reservedCommonEvent();
    setDestination(x, y);
}

/* The game object class for the timer. */
declare class Game_Timer {
    constructor();
    initialize();
    isWorking();
    onExpire();
    seconds();
    start(count);
    stop();
    update(sceneActive);
}

/* or selections, etc. */
declare class Game_Message {
    constructor();
    add(text);
    allText();
    background();
    choiceBackground();
    choiceCancelType();
    choiceDefaultType();
    choicePositionType();
    choices();
    clear();
    faceIndex();
    faceName();
    hasText();
    initialize();
    isBusy();
    isChoice();
    isItemChoice();
    isNumberInput();
    itemChoiceItypeId();
    itemChoiceVariableId();
    newPage();
    numInputMaxDigits();
    numInputVariableId();
    onChoice(n);
    positionType();
    scrollMode();
    scrollNoFast();
    scrollSpeed();
    setBackground(background);
    setChoiceBackground(background);
    setChoiceCallback(callback);
    setChoicePositionType(positionType);
    setChoices(choices, defaultType, cancelType);
    setFaceImage(faceName, faceIndex);
    setItemChoice(variableId, itemType);
    setNumberInput(variableId, maxDigits);
    setPositionType(positionType);
    setScroll(speed, noFast);
}

/* The game object class for switches. */
declare class Game_Switches {
    constructor();
    clear();
    initialize();
    onChange();
    setValue(switchId, value);
    value(switchId);
}

/* The game object class for variables. */
declare class Game_Variables {
    constructor();
    clear();
    initialize();
    onChange();
    setValue(variableId, value);
    value(variableId);
}

/* The game object class for self switches. */
declare class Game_SelfSwitches {
    constructor();
    clear();
    initialize();
    onChange();
    setValue(key, value);
    value(key);
}

/* and flashes. */
declare class Game_Screen {
    constructor();
    brightness();
    changeWeather(type, power, duration);
    clear();
    clearFade();
    clearFlash();
    clearPictures();
    clearShake();
    clearTone();
    clearWeather();
    clearZoom();
    eraseBattlePictures();
    erasePicture(pictureId);
    flashColor();
    initialize();
    maxPictures();
    movePicture(pictureId, origin, x, y, scaleX, scaleY, opacity, blendMode, duration);
    onBattleStart();
    picture(pictureId);
    realPictureId(pictureId);
    rotatePicture(pictureId, speed);
    setZoom(x, y, scale);
    shake();
    showPicture(pictureId, name, origin, x, y, scaleX, scaleY, opacity, blendMode);
    startFadeIn(duration);
    startFadeOut(duration);
    startFlash(color, duration);
    startFlashForDamage();
    startShake(power, speed, duration);
    startTint(tone, duration);
    startZoom(x, y, scale, duration);
    tintPicture(pictureId, tone, duration);
    tone();
    update();
    updateFadeIn();
    updateFadeOut();
    updateFlash();
    updatePictures();
    updateShake();
    updateTone();
    updateWeather();
    updateZoom();
    weatherPower();
    weatherType();
    zoomScale();
    zoomX();
    zoomY();
}

/* The game object class for a picture. */
declare class Game_Picture {
    constructor();
    angle();
    blendMode();
    erase();
    initBasic();
    initialize();
    initRotation();
    initTarget();
    initTone();
    move(origin, x, y, scaleX, scaleY, opacity, blendMode, duration);
    name();
    opacity();
    origin();
    rotate(speed);
    scaleX();
    scaleY();
    show(name, origin, x, y, scaleX, scaleY, opacity, blendMode);
    tint(tone, duration);
    tone();
    update();
    updateMove();
    updateRotation();
    updateTone();
    x();
    y();
}

/* required because save data should not include the database object itself. */
declare class Game_Item {
    constructor(item);
    initialize(item?);
    isArmor();
    isEquipItem();
    isItem();
    isNull();
    isSkill();
    isUsableItem();
    isWeapon();
    itemId();
    object();
    setEquip(isWeapon, itemId);
    setObject(item);
}

/* The game object class for a battle action. */
declare class Game_Action {
    constructor(subject, forcing);
    static EFFECT_ADD_BUFF: number;
    static EFFECT_ADD_DEBUFF: number;
    static EFFECT_ADD_STATE: number;
    static EFFECT_COMMON_EVENT: number;
    static EFFECT_GAIN_TP: number;
    static EFFECT_GROW: number;
    static EFFECT_LEARN_SKILL: number;
    static EFFECT_RECOVER_HP: number;
    static EFFECT_RECOVER_MP: number;
    static EFFECT_REMOVE_BUFF: number;
    static EFFECT_REMOVE_DEBUFF: number;
    static EFFECT_REMOVE_STATE: number;
    static EFFECT_SPECIAL: number;
    static HITTYPE_CERTAIN: number;
    static HITTYPE_MAGICAL: number;
    static HITTYPE_PHYSICAL: number;
    static SPECIAL_EFFECT_ESCAPE: number;
    apply(target);
    applyCritical(damage);
    applyGlobal();
    applyGuard(damage, target);
    applyItemEffect(target, effect);
    applyItemUserEffect(target);
    applyVariance(damage, variance);
    calcElementRate(target);
    checkDamageType(list);
    checkItemScope(list);
    clear();
    confusionTarget();
    decideRandomTarget();
    elementsMaxRate(target, elements);
    evalDamageFormula(target);
    evaluate();
    evaluateWithTarget(target);
    executeDamage(target, value);
    executeHpDamage(target, value);
    executeMpDamage(target, value);
    friendsUnit();
    gainDrainedHp(value);
    gainDrainedMp(value);
    hasItemAnyValidEffects(target);
    initialize(subject?, forcing?);
    isAttack();
    isCertainHit();
    isDamage();
    isDrain();
    isForAll();
    isForDeadFriend();
    isForFriend();
    isForOne();
    isForOpponent();
    isForRandom();
    isForUser();
    isGuard();
    isHpEffect();
    isHpRecover();
    isItem();
    isMagical();
    isMagicSkill();
    isMpEffect();
    isMpRecover();
    isPhysical();
    isRecover();
    isSkill();
    isValid();
    item();
    itemCnt(target);
    itemCri(target);
    itemEffectAddAttackState(target, effect);
    itemEffectAddBuff(target, effect);
    itemEffectAddDebuff(target, effect);
    itemEffectAddNormalState(target, effect);
    itemEffectAddState(target, effect);
    itemEffectCommonEvent(target, effect);
    itemEffectGainTp(target, effect);
    itemEffectGrow(target, effect);
    itemEffectLearnSkill(target, effect);
    itemEffectRecoverHp(target, effect);
    itemEffectRecoverMp(target, effect);
    itemEffectRemoveBuff(target, effect);
    itemEffectRemoveDebuff(target, effect);
    itemEffectRemoveState(target, effect);
    itemEffectSpecial(target, effect);
    itemEva(target);
    itemHit(target);
    itemMrf(target);
    itemTargetCandidates();
    lukEffectRate(target);
    makeDamageValue(target, critical);
    makeSuccess(target);
    makeTargets();
    needsSelection();
    numRepeats();
    numTargets();
    opponentsUnit();
    prepare();
    repeatTargets(targets);
    setAttack();
    setConfusion();
    setEnemyAction(action);
    setGuard();
    setItem(itemId);
    setItemObject(object);
    setSkill(skillId);
    setSubject(subject);
    setTarget(targetIndex);
    speed();
    subject();
    targetsForFriends();
    targetsForOpponents();
    testApply(target);
    testItemEffect(target, effect);
}

/* member variables in this class are public. */
declare class Game_ActionResult {
    constructor();
    addedStateObjects();
    clear();
    initialize();
    isBuffAdded(paramId);
    isBuffRemoved(paramId);
    isDebuffAdded(paramId);
    isHit();
    isStateAdded(stateId);
    isStateRemoved(stateId);
    isStatusAffected();
    pushAddedBuff(paramId);
    pushAddedDebuff(paramId);
    pushAddedState(stateId);
    pushRemovedBuff(paramId);
    pushRemovedState(stateId);
    removedStateObjects();
}

/* The superclass of Game_Battler. It mainly contains parameters calculation. */
declare class Game_BattlerBase {
    constructor();
    static FLAG_ID_AUTO_BATTLE: number;
    static FLAG_ID_GUARD: number;
    static FLAG_ID_PRESERVE_TP: number;
    static FLAG_ID_SUBSTITUTE: number;
    static ICON_BUFF_START: number;
    static ICON_DEBUFF_START: number;
    static TRAIT_ACTION_PLUS: number;
    static TRAIT_ATTACK_ELEMENT: number;
    static TRAIT_ATTACK_SPEED: number;
    static TRAIT_ATTACK_STATE: number;
    static TRAIT_ATTACK_TIMES: number;
    static TRAIT_COLLAPSE_TYPE: number;
    static TRAIT_DEBUFF_RATE: number;
    static TRAIT_ELEMENT_RATE: number;
    static TRAIT_EQUIP_ATYPE: number;
    static TRAIT_EQUIP_LOCK: number;
    static TRAIT_EQUIP_SEAL: number;
    static TRAIT_EQUIP_WTYPE: number;
    static TRAIT_PARAM: number;
    static TRAIT_PARTY_ABILITY: number;
    static TRAIT_SKILL_ADD: number;
    static TRAIT_SKILL_SEAL: number;
    static TRAIT_SLOT_TYPE: number;
    static TRAIT_SPARAM: number;
    static TRAIT_SPECIAL_FLAG: number;
    static TRAIT_STATE_RATE: number;
    static TRAIT_STATE_RESIST: number;
    static TRAIT_STYPE_ADD: number;
    static TRAIT_STYPE_SEAL: number;
    static TRAIT_XPARAM: number;
    agi;
    atk;
    cev;
    cnt;
    cri;
    def;
    eva;
    exr;
    fdr;
    grd;
    hit;
    hp;
    hrg;
    luk;
    mat;
    mcr;
    mdf;
    mdr;
    mev;
    mhp;
    mmp;
    mp;
    mrf;
    mrg;
    pdr;
    pha;
    rec;
    tcr;
    tgr;
    tp;
    trg;
    actionPlusSet();
    addedSkills();
    addedSkillTypes();
    addNewState(stateId);
    addParam(paramId, value);
    allIcons();
    allTraits();
    appear();
    attackElements();
    attackSkillId();
    attackSpeed();
    attackStates();
    attackStatesRate(stateId);
    attackTimesAdd();
    buff(paramId);
    buffIconIndex(buffLevel, paramId);
    buffIcons();
    buffLength();
    canAttack();
    canEquip(item);
    canEquipArmor(item);
    canEquipWeapon(item);
    canGuard();
    canInput();
    canMove();
    canPaySkillCost(skill);
    canUse(item);
    clearBuffs();
    clearParamPlus();
    clearStates();
    collapseType();
    confusionLevel();
    deathStateId();
    debuffRate(paramId);
    decreaseBuff(paramId);
    die();
    elementRate(elementId);
    eraseBuff(paramId);
    eraseState(stateId);
    guardSkillId();
    hide();
    hpRate();
    increaseBuff(paramId);
    initialize();
    initMembers();
    isActor();
    isAlive();
    isAppeared();
    isAutoBattle();
    isBuffAffected(paramId);
    isBuffExpired(paramId);
    isBuffOrDebuffAffected(paramId);
    isConfused();
    isDead();
    isDeathStateAffected();
    isDebuffAffected(paramId);
    isDualWield();
    isDying();
    isEnemy();
    isEquipAtypeOk(atypeId);
    isEquipTypeLocked(etypeId);
    isEquipTypeSealed(etypeId);
    isEquipWtypeOk(wtypeId);
    isGuard();
    isHidden();
    isMaxBuffAffected(paramId);
    isMaxDebuffAffected(paramId);
    isOccasionOk(item);
    isPreserveTp();
    isRestricted();
    isSkillSealed(skillId);
    isSkillTypeSealed(stypeId);
    isSkillWtypeOk(skill);
    isStateAffected(stateId);
    isStateExpired(stateId);
    isStateResist(stateId);
    isSubstitute();
    maxTp();
    meetsItemConditions(item);
    meetsSkillConditions(skill);
    meetsUsableItemConditions(item);
    mostImportantStateText();
    mpRate();
    onRestrict();
    overwriteBuffTurns(paramId, turns);
    param(paramId);
    paramBase(paramId);
    paramBuffRate(paramId);
    paramMax(paramId);
    paramMin(paramId);
    paramPlus(paramId);
    paramRate(paramId);
    partyAbility(abilityId);
    paySkillCost(skill);
    recoverAll();
    refresh();
    resetStateCounts(stateId);
    restriction();
    revive();
    setHp(hp);
    setMp(mp);
    setTp(tp);
    skillMpCost(skill);
    skillTpCost(skill);
    slotType();
    sortStates();
    sparam(sparamId);
    specialFlag(flagId);
    stateIcons();
    stateMotionIndex();
    stateOverlayIndex();
    stateRate(stateId);
    stateResistSet();
    states();
    tpRate();
    traitObjects();
    traits(code);
    traitsPi(code, id);
    traitsSet(code);
    traitsSum(code, id);
    traitsSumAll(code);
    traitsWithId(code, id);
    updateBuffTurns();
    updateStateTurns();
    xparam(xparamId);
}

/* and actions. */
declare class Game_Battler extends Game_BattlerBase {
    constructor();
    action(index);
    addBuff(paramId, turns);
    addDebuff(paramId, turns);
    addState(stateId);
    chargeTpByDamage(damageRate);
    clearActions();
    clearAnimations();
    clearDamagePopup();
    clearEffect();
    clearMotion();
    clearResult();
    clearTp();
    clearWeaponAnimation();
    consumeItem(item);
    currentAction();
    deselect();
    effectType();
    escape();
    forceAction(skillId, targetIndex);
    gainHp(value);
    gainMp(value);
    gainSilentTp(value);
    gainTp(value);
    initialize();
    initMembers();
    initTp();
    isActing();
    isAnimationRequested();
    isChanting();
    isDamagePopupRequested();
    isEffectRequested();
    isGuardWaiting();
    isInputting();
    isMotionRefreshRequested();
    isMotionRequested();
    isSelected();
    isStateAddable(stateId);
    isStateRestrict(stateId);
    isUndecided();
    isWaiting();
    isWeaponAnimationRequested();
    makeActions();
    makeActionTimes();
    makeSpeed();
    maxSlipDamage();
    motionType();
    numActions();
    onAllActionsEnd();
    onBattleEnd();
    onBattleStart();
    onDamage(value);
    onRestrict();
    onTurnEnd();
    performAction(action);
    performActionEnd();
    performActionStart(action);
    performCollapse();
    performCounter();
    performDamage();
    performEvasion();
    performMagicEvasion();
    performMiss();
    performRecovery();
    performReflection();
    performSubstitute(target);
    refresh();
    regenerateAll();
    regenerateHp();
    regenerateMp();
    regenerateTp();
    removeAllBuffs();
    removeBattleStates();
    removeBuff(paramId);
    removeBuffsAuto();
    removeCurrentAction();
    removeState(stateId);
    removeStatesAuto(timing);
    removeStatesByDamage();
    requestEffect(effectType);
    requestMotion(motionType);
    requestMotionRefresh();
    result();
    select();
    setAction(index, action);
    setActionState(actionState);
    setLastTarget(target);
    shiftAnimation();
    speed();
    startAnimation(animationId, mirror, delay);
    startDamagePopup();
    startWeaponAnimation(weaponImageId);
    useItem(item);
    weaponImageId();
}

/* The game object class for an actor. */
declare class Game_Actor extends Game_Battler {
    constructor(actorId);
    level;
    actor();
    actorId();
    armors();
    attackAnimationId1();
    attackAnimationId2();
    attackElements();
    bareHandsAnimationId();
    bareHandsElementId();
    basicFloorDamage();
    battlerName();
    benchMembersExpRate();
    bestEquipItem(slotId);
    calcEquipItemPerformance(item);
    changeClass(classId, keepExp);
    changeEquip(slotId, item);
    changeEquipById(etypeId, itemId);
    changeExp(exp, show);
    changeLevel(level, show);
    characterIndex();
    characterName();
    checkFloorEffect();
    clearActions();
    clearEquipments();
    clearStates();
    currentClass();
    currentExp();
    currentLevelExp();
    discardEquip(item);
    displayLevelUp(newSkills);
    equips();
    equipSlots();
    eraseState(stateId);
    executeFloorDamage();
    expForLevel(level);
    faceIndex();
    faceName();
    finalExpRate();
    findNewSkills(lastSkills);
    forceChangeEquip(slotId, item);
    forgetSkill(skillId);
    friendsUnit();
    gainExp(exp);
    hasArmor(armor);
    hasNoWeapons();
    hasSkill(skillId);
    hasWeapon(weapon);
    index();
    initEquips(equips);
    initExp();
    initialize(actorId?);
    initImages();
    initMembers();
    initSkills();
    inputtingAction();
    isActor();
    isBattleMember();
    isClass(gameClass);
    isEquipChangeOk(slotId);
    isEquipped(item);
    isFormationChangeOk();
    isLearnedSkill(skillId);
    isMaxLevel();
    isSkillWtypeOk(skill);
    isSpriteVisible();
    isWtypeEquipped(wtypeId);
    lastBattleSkill();
    lastCommandSymbol();
    lastMenuSkill();
    learnSkill(skillId);
    levelDown();
    levelUp();
    makeActionList();
    makeActions();
    makeAutoBattleActions();
    makeConfusionActions();
    maxFloorDamage();
    maxLevel();
    meetsUsableItemConditions(item);
    name();
    nextLevelExp();
    nextRequiredExp();
    nickname();
    onPlayerWalk();
    opponentsUnit();
    optimizeEquipments();
    paramBase(paramId);
    paramMax(paramId);
    paramPlus(paramId);
    performAction(action);
    performActionEnd();
    performActionStart(action);
    performAttack();
    performCollapse();
    performCounter();
    performDamage();
    performEscape();
    performEvasion();
    performMagicEvasion();
    performMapDamage();
    performVictory();
    profile();
    refresh();
    releaseUnequippableItems(forcing);
    resetStateCounts(stateId);
    selectNextCommand();
    selectPreviousCommand();
    setBattlerImage(battlerName);
    setCharacterImage(characterName, characterIndex);
    setFaceImage(faceName, faceIndex);
    setLastBattleSkill(skill);
    setLastCommandSymbol(symbol);
    setLastMenuSkill(skill);
    setName(name);
    setNickname(nickname);
    setProfile(profile);
    setup(actorId);
    shouldDisplayLevelUp();
    showAddedStates();
    showRemovedStates();
    skills();
    startAnimation(animationId, mirror, delay);
    stepsForTurn();
    testEscape(item);
    tradeItemWithParty(newItem, oldItem);
    traitObjects();
    turnEndOnMap();
    updateStateSteps(state);
    usableSkills();
    weapons();
}

/* The game object class for the system data. */
declare class Game_System {
    constructor();
    battleBgm();
    battleCount();
    defeatMe();
    disableEncounter();
    disableFormation();
    disableMenu();
    disableSave();
    enableEncounter();
    enableFormation();
    enableMenu();
    enableSave();
    escapeCount();
    initialize();
    isChinese();
    isCJK();
    isEncounterEnabled();
    isFormationEnabled();
    isJapanese();
    isKorean();
    isMenuEnabled();
    isRussian();
    isSaveEnabled();
    isSideView();
    onAfterLoad();
    onBattleEscape();
    onBattleStart();
    onBattleWin();
    onBeforeSave();
    playtime();
    playtimeText();
    replayBgm();
    replayWalkingBgm();
    saveBgm();
    saveCount();
    saveWalkingBgm();
    saveWalkingBgm2();
    setBattleBgm(value);
    setDefeatMe(value);
    setVictoryMe(value);
    setWindowTone(value);
    versionId();
    victoryMe();
    winCount();
    windowTone();
}

/* The wrapper class for an actor array. */
declare class Game_Actors {
    constructor();
    actor(actorId);
    initialize();
}

/* The superclass of Game_Party and Game_Troop. */
declare class Game_Unit {
    constructor();
    agility();
    aliveMembers();
    clearActions();
    clearResults();
    deadMembers();
    inBattle();
    initialize();
    isAllDead();
    makeActions();
    members();
    movableMembers();
    onBattleEnd();
    onBattleStart();
    randomDeadTarget();
    randomTarget();
    select(activeMember);
    smoothDeadTarget(index);
    smoothTarget(index);
    substituteBattler();
    tgrSum();
}

/* included. */
declare class Game_Party extends Game_Unit {
    constructor();
    static ABILITY_CANCEL_SURPRISE: number;
    static ABILITY_DROP_ITEM_DOUBLE: number;
    static ABILITY_ENCOUNTER_HALF: number;
    static ABILITY_ENCOUNTER_NONE: number;
    static ABILITY_GOLD_DOUBLE: number;
    static ABILITY_RAISE_PREEMPTIVE: number;
    addActor(actorId);
    allItems();
    allMembers();
    armors();
    battleMembers();
    canInput();
    canUse(item);
    charactersForSavefile();
    consumeItem(item);
    discardMembersEquip(item, amount);
    equipItems();
    exists();
    facesForSavefile();
    gainGold(amount);
    gainItem(item, amount, includeEquip);
    gold();
    hasCancelSurprise();
    hasDropItemDouble();
    hasEncounterHalf();
    hasEncounterNone();
    hasGoldDouble();
    hasItem(item, includeEquip);
    hasMaxItems(item);
    hasRaisePreemptive();
    highestLevel();
    increaseSteps();
    initAllItems();
    initialize();
    isAllDead();
    isAnyMemberEquipped(item);
    isEmpty();
    itemContainer(item);
    items();
    lastItem();
    leader();
    loseGold(amount);
    loseItem(item, amount, includeEquip);
    makeMenuActorNext();
    makeMenuActorPrevious();
    maxBattleMembers();
    maxGold();
    maxItems(item);
    members();
    menuActor();
    name();
    numItems(item);
    onPlayerWalk();
    partyAbility(abilityId);
    performEscape();
    performVictory();
    ratePreemptive(troopAgi);
    rateSurprise(troopAgi);
    removeActor(actorId);
    removeBattleStates();
    requestMotionRefresh();
    reviveBattleMembers();
    setLastItem(item);
    setMenuActor(actor);
    setTargetActor(actor);
    setupBattleTest();
    setupBattleTestItems();
    setupBattleTestMembers();
    setupStartingMembers();
    size();
    steps();
    swapOrder(index1, index2);
    targetActor();
    weapons();
}

/* The game object class for a troop and the battle-related data. */
declare class Game_Troop extends Game_Unit {
    constructor();
    static LETTER_TABLE_FULL: string;
    static LETTER_TABLE_HALF: string;
    clear();
    enemyNames();
    expTotal();
    goldRate();
    goldTotal();
    increaseTurn();
    initialize();
    isEventRunning();
    letterTable();
    makeDropItems();
    makeUniqueNames();
    meetsConditions(page);
    members();
    setup(troopId);
    setupBattleEvent();
    troop();
    turnCount();
    updateInterpreter();
}

/* determination functions. */
declare class Game_Map {
    constructor();
    adjustX(x);
    adjustY(y);
    airship();
    allTiles(x, y);
    autoplay();
    autotileType(x, y, z);
    battleback1Name();
    battleback2Name();
    boat();
    canvasToMapX(x);
    canvasToMapY(y);
    changeBattleback(battleback1Name, battleback2Name);
    changeParallax(name, loopX, loopY, sx, sy);
    changeTileset(tilesetId);
    checkLayeredTilesFlags(x, y, bit);
    checkPassage(x, y, bit);
    createVehicles();
    data();
    deltaX(x1, x2);
    deltaY(y1, y2);
    disableNameDisplay();
    displayName();
    displayX();
    displayY();
    distance(x1, y1, x2, y2);
    doScroll(direction, distance);
    enableNameDisplay();
    encounterList();
    encounterStep();
    eraseEvent(eventId);
    event(eventId): Game_Event;
    eventIdXy(x, y);
    events(): Game_Event[];
    eventsXy(x, y);
    eventsXyNt(x, y);
    height();
    initialize();
    isAirshipLandOk(x, y);
    isAnyEventStarting();
    isBoatPassable(x, y);
    isBush(x, y);
    isCounter(x, y);
    isDamageFloor(x, y);
    isDashDisabled();
    isEventRunning();
    isLadder(x, y);
    isLoopHorizontal();
    isLoopVertical();
    isNameDisplayEnabled();
    isOverworld();
    isPassable(x, y, d);
    isScrolling();
    isShipPassable(x, y);
    isValid(x, y);
    layeredTiles(x, y);
    mapId();
    parallaxName();
    parallaxOx();
    parallaxOy();
    parallelCommonEvents();
    refereshVehicles();
    refresh();
    refreshIfNeeded();
    refreshTileEvents();
    regionId(x, y);
    requestRefresh(mapId);
    roundX(x);
    roundXWithDirection(x, d);
    roundY(y);
    roundYWithDirection(y, d);
    screenTileX();
    screenTileY();
    scrollDistance();
    scrollDown(distance);
    scrollLeft(distance);
    scrollRight(distance);
    scrollUp(distance);
    setDisplayPos(x, y);
    setup(mapId);
    setupAutorunCommonEvent();
    setupBattleback();
    setupEvents();
    setupParallax();
    setupScroll();
    setupStartingEvent();
    setupStartingMapEvent();
    setupTestEvent();
    ship();
    startScroll(direction, distance, speed);
    terrainTag(x, y);
    tileEventsXy(x, y);
    tileHeight();
    tileId(x, y, z);
    tileset();
    tilesetFlags();
    tilesetId();
    tileWidth();
    unlockEvent(eventId);
    update(sceneActive);
    updateEvents();
    updateInterpreter();
    updateParallax();
    updateScroll();
    updateVehicles();
    vehicle(type);
    vehicles();
    width();
    xWithDirection(x, d);
    yWithDirection(y, d);
}

/* running parallel process events. */
declare class Game_CommonEvent {
    constructor(commonEventId);
    event();
    initialize(commonEventId?);
    isActive();
    list();
    refresh();
    update();
}

/* coordinates and images, shared by all characters. */
declare class Game_CharacterBase {
    constructor();
    x;
    y;
    animationId();
    animationWait();
    balloonId();
    blendMode();
    bushDepth();
    canPass(x, y, d);
    canPassDiagonally(x, y, horz, vert);
    characterIndex();
    characterName();
    checkEventTriggerTouch(x, y);
    checkEventTriggerTouchFront(d);
    checkStop(threshold);
    copyPosition(character);
    direction();
    distancePerFrame();
    endAnimation();
    endBalloon();
    hasStepAnime();
    hasWalkAnime();
    increaseSteps();
    initialize();
    initMembers();
    isAnimationPlaying();
    isBalloonPlaying();
    isCollidedWithCharacters(x, y);
    isCollidedWithEvents(x, y);
    isCollidedWithVehicles(x, y);
    isDashing();
    isDebugThrough();
    isDirectionFixed();
    isJumping();
    isMapPassable(x, y, d);
    isMovementSucceeded(x, y);
    isMoving();
    isNearTheScreen();
    isNormalPriority();
    isObjectCharacter();
    isOnBush();
    isOnLadder();
    isOriginalPattern();
    isStopping();
    isThrough();
    isTile();
    isTransparent();
    jump(xPlus, yPlus);
    jumpHeight();
    locate(x, y);
    maxPattern();
    moveDiagonally(horz, vert);
    moveFrequency();
    moveSpeed();
    moveStraight(d);
    opacity();
    pattern();
    pos(x, y);
    posNt(x, y);
    realMoveSpeed();
    refreshBushDepth();
    regionId();
    requestAnimation(animationId);
    requestBalloon(balloonId);
    resetPattern();
    resetStopCount();
    reverseDir(d);
    screenX();
    screenY();
    screenZ();
    scrolledX();
    scrolledY();
    setBlendMode(blendMode);
    setDirection(d);
    setDirectionFix(directionFix);
    setImage(characterName, characterIndex);
    setMoveFrequency(moveFrequency);
    setMovementSuccess(success);
    setMoveSpeed(moveSpeed);
    setOpacity(opacity);
    setPattern(pattern);
    setPosition(x, y);
    setPriorityType(priorityType);
    setStepAnime(stepAnime);
    setThrough(through);
    setTileImage(tileId);
    setTransparent(transparent);
    setWalkAnime(walkAnime);
    shiftY();
    startAnimation();
    startBalloon();
    straighten();
    terrainTag();
    tileId();
    update();
    updateAnimation();
    updateAnimationCount();
    updateJump();
    updateMove();
    updatePattern();
    updateStop();
}

/* The superclass of Game_Player, Game_Follower, GameVehicle, and Game_Event. */
declare class Game_Character extends Game_CharacterBase {
    constructor();
    static ROUTE_CHANGE_BLEND_MODE: number;
    static ROUTE_CHANGE_FREQ: number;
    static ROUTE_CHANGE_IMAGE: number;
    static ROUTE_CHANGE_OPACITY: number;
    static ROUTE_CHANGE_SPEED: number;
    static ROUTE_DIR_FIX_OFF: number;
    static ROUTE_DIR_FIX_ON: number;
    static ROUTE_END: number;
    static ROUTE_JUMP: number;
    static ROUTE_MOVE_AWAY: number;
    static ROUTE_MOVE_BACKWARD: number;
    static ROUTE_MOVE_DOWN: number;
    static ROUTE_MOVE_FORWARD: number;
    static ROUTE_MOVE_LEFT: number;
    static ROUTE_MOVE_LOWER_L: number;
    static ROUTE_MOVE_LOWER_R: number;
    static ROUTE_MOVE_RANDOM: number;
    static ROUTE_MOVE_RIGHT: number;
    static ROUTE_MOVE_TOWARD: number;
    static ROUTE_MOVE_UP: number;
    static ROUTE_MOVE_UPPER_L: number;
    static ROUTE_MOVE_UPPER_R: number;
    static ROUTE_PLAY_SE: number;
    static ROUTE_SCRIPT: number;
    static ROUTE_STEP_ANIME_OFF: number;
    static ROUTE_STEP_ANIME_ON: number;
    static ROUTE_SWITCH_OFF: number;
    static ROUTE_SWITCH_ON: number;
    static ROUTE_THROUGH_OFF: number;
    static ROUTE_THROUGH_ON: number;
    static ROUTE_TRANSPARENT_OFF: number;
    static ROUTE_TRANSPARENT_ON: number;
    static ROUTE_TURN_180D: number;
    static ROUTE_TURN_90D_L: number;
    static ROUTE_TURN_90D_R: number;
    static ROUTE_TURN_90D_R_L: number;
    static ROUTE_TURN_AWAY: number;
    static ROUTE_TURN_DOWN: number;
    static ROUTE_TURN_LEFT: number;
    static ROUTE_TURN_RANDOM: number;
    static ROUTE_TURN_RIGHT: number;
    static ROUTE_TURN_TOWARD: number;
    static ROUTE_TURN_UP: number;
    static ROUTE_WAIT: number;
    static ROUTE_WALK_ANIME_OFF: number;
    static ROUTE_WALK_ANIME_ON: number;
    advanceMoveRouteIndex();
    deltaXFrom(x);
    deltaYFrom(y);
    findDirectionTo(goalX, goalY);
    forceMoveRoute(moveRoute);
    initialize();
    initMembers();
    isMoveRouteForcing();
    memorizeMoveRoute();
    moveAwayFromCharacter(character);
    moveAwayFromPlayer();
    moveBackward();
    moveForward();
    moveRandom();
    moveTowardCharacter(character);
    moveTowardPlayer();
    processMoveCommand(command);
    processRouteEnd();
    restoreMoveRoute();
    searchLimit();
    setMoveRoute(moveRoute);
    swap(character);
    turn180();
    turnAwayFromCharacter(character);
    turnAwayFromPlayer();
    turnLeft90();
    turnRandom();
    turnRight90();
    turnRightOrLeft90();
    turnTowardCharacter(character);
    turnTowardPlayer();
    updateRoutineMove();
    updateStop();
}

/* determinants and map scrolling functions. */
declare class Game_Player extends Game_Character {
    constructor();
    areFollowersGathered();
    areFollowersGathering();
    canEncounter();
    canMove();
    canStartLocalEvents();
    center(x, y);
    centerX();
    centerY();
    checkEventTriggerHere(triggers);
    checkEventTriggerThere(triggers);
    checkEventTriggerTouch(x, y);
    clearTransferInfo();
    encounterProgressValue();
    executeEncounter();
    executeMove(direction);
    fadeType();
    followers();
    forceMoveForward();
    gatherFollowers();
    getInputDirection();
    getOffVehicle();
    getOnOffVehicle();
    getOnVehicle();
    hideFollowers();
    increaseSteps();
    initialize();
    initMembers();
    isCollided(x, y);
    isDashButtonPressed();
    isDashing();
    isDebugThrough();
    isInAirship();
    isInBoat();
    isInShip();
    isInVehicle();
    isMapPassable(x, y, d);
    isNormal();
    isOnDamageFloor();
    isStopping();
    isTransferring();
    jump(xPlus, yPlus);
    locate(x, y);
    makeEncounterCount();
    makeEncounterTroopId();
    meetsEncounterConditions(encounter);
    moveByInput();
    moveDiagonally(horz, vert);
    moveStraight(d);
    newMapId();
    performTransfer();
    refresh();
    requestMapReload();
    reserveTransfer(mapId, x, y, d, fadeType);
    showFollowers();
    startMapEvent(x, y, triggers, normal);
    triggerAction();
    triggerButtonAction();
    triggerTouchAction();
    triggerTouchActionD1(x1, y1);
    triggerTouchActionD2(x2, y2);
    triggerTouchActionD3(x2, y2);

    /* null//FIXME: update overloads parent update with a parameter, but parent doesn't have it */
    update(sceneActive?);
    updateDashing();
    updateEncounterCount();
    updateNonmoving(wasMoving);
    updateScroll(lastScrolledX, lastScrolledY);
    updateVehicle();
    updateVehicleGetOff();
    updateVehicleGetOn();
    vehicle();
}

/* other than the front character, displayed in the party. */
declare class Game_Follower extends Game_Character {
    constructor(memberIndex);
    actor();
    chaseCharacter(character);
    initialize(memberIndex?);
    isVisible();
    refresh();
    update();
}

/* The wrapper class for a follower array. */
declare class Game_Followers {
    constructor();
    areGathered();
    areGathering();
    areMoving();
    follower(index);
    forEach(callback, thisObject);
    gather();
    hide();
    initialize();
    isSomeoneCollided(x, y);
    isVisible();
    jumpAll();
    refresh();
    reverseEach(callback, thisObject);
    show();
    synchronize(x, y, d);
    update();
    updateMove();
    visibleFollowers();
}

/* The game object class for a vehicle. */
declare class Game_Vehicle extends Game_Character {
    constructor(type);
    canMove();
    getOff();
    getOn();
    initialize(type?);
    initMembers();
    initMoveSpeed();
    isAirship();
    isBoat();
    isHighest();
    isLandOk(x, y, d);
    isLowest();
    isMapPassable(x, y, d);
    isShip();
    isTakeoffOk();
    loadSystemSettings();
    maxAltitude();
    playBgm();
    pos(x, y);
    refresh();
    resetDirection();
    screenY();
    setBgm(bgm);
    setLocation(mapId, x, y);
    shadowOpacity();
    shadowX();
    shadowY();
    syncWithPlayer();
    update();
    updateAirship();
    updateAirshipAltitude();
    vehicle();
}

/* switching and running parallel process events. */
declare class Game_Event extends Game_Character {
    constructor(mapId, eventId);
    checkEventTriggerAuto();
    checkEventTriggerTouch(x, y);
    clearPageSettings();
    clearStartingFlag();
    erase();
    event();
    eventId();
    findProperPageIndex();
    forceMoveRoute(moveRoute);
    initialize(mapId?, eventId?);
    initMembers();
    isCollidedWithCharacters(x, y);
    isCollidedWithEvents(x, y);
    isCollidedWithPlayerCharacters(x, y);
    isNearThePlayer();
    isOriginalPattern();
    isStarting();
    isTriggerIn(triggers);
    list();
    locate(x, y);
    lock();
    meetsConditions(page);
    moveTypeCustom();
    moveTypeRandom();
    moveTypeTowardPlayer();
    page();
    refresh();
    resetPattern();
    setupPage();
    setupPageSettings();
    start();
    stopCountThreshold();
    unlock();
    update();
    updateParallel();
    updateSelfMovement();
    updateStop();
}

/* The interpreter for running event commands. */
declare class Game_Interpreter {
    constructor(depth);
    static requestImages(list, commonList);
    changeHp(target, value, allowDeath);
    character(param);
    checkFreeze();
    checkOverflow();
    clear();

    /* Show Text */
    command101();

    /* Show Choices */
    command102();

    /* Input Number */
    command103();

    /* Select Item */
    command104();

    /* Show Scrolling Text */
    command105();

    /* Comment */
    command108();

    /* Conditional Branch */
    command111();

    /* Loop */
    command112();

    /* Break Loop */
    command113();

    /* Exit Event Processing */
    command115();

    /* Common Event */
    command117();

    /* Label */
    command118();

    /* Jump to Label */
    command119();

    /* Control Switches */
    command121();

    /* Control Variables */
    command122();

    /* Control Self Switch */
    command123();

    /* Control Timer */
    command124();

    /* Change Gold */
    command125();

    /* Change Items */
    command126();

    /* Change Weapons */
    command127();

    /* Change Armors */
    command128();

    /* Change Party Member */
    command129();

    /* Change Battle BGM */
    command132();

    /* Change Victory ME */
    command133();

    /* Change Save Access */
    command134();

    /* Change Menu Access */
    command135();

    /* Change Encounter Disable */
    command136();

    /* Change Formation Access */
    command137();

    /* Change Window Color */
    command138();

    /* Change Defeat ME */
    command139();

    /* Change Vehicle BGM */
    command140();

    /* Transfer Player */
    command201();

    /* Set Vehicle Location */
    command202();

    /* Set Event Location */
    command203();

    /* Scroll Map */
    command204();

    /* Set Movement Route */
    command205();

    /* Getting On and Off Vehicles */
    command206();

    /* Change Transparency */
    command211();

    /* Show Animation */
    command212();

    /* Show Balloon Icon */
    command213();

    /* Erase Event */
    command214();

    /* Change Player Followers */
    command216();

    /* Gather Followers */
    command217();

    /* Fadeout Screen */
    command221();

    /* Fadein Screen */
    command222();

    /* Tint Screen */
    command223();

    /* Flash Screen */
    command224();

    /* Shake Screen */
    command225();

    /* Wait */
    command230();

    /* Show Picture */
    command231();

    /* Move Picture */
    command232();

    /* Rotate Picture */
    command233();

    /* Tint Picture */
    command234();

    /* Erase Picture */
    command235();

    /* Set Weather Effect */
    command236();

    /* Play BGM */
    command241();

    /* Fadeout BGM */
    command242();

    /* Save BGM */
    command243();

    /* Resume BGM */
    command244();

    /* Play BGS */
    command245();

    /* Fadeout BGS */
    command246();

    /* Play ME */
    command249();

    /* Play SE */
    command250();

    /* Stop SE */
    command251();

    /* Play Movie */
    command261();

    /* Change Map Name Display */
    command281();

    /* Change Tileset */
    command282();

    /* Change Battle Back */
    command283();

    /* Change Parallax */
    command284();

    /* Get Location Info */
    command285();

    /* Battle Processing */
    command301();

    /* Shop Processing */
    command302();

    /* Name Input Processing */
    command303();

    /* Change HP */
    command311();

    /* Change MP */
    command312();

    /* Change State */
    command313();

    /* Recover All */
    command314();

    /* Change EXP */
    command315();

    /* Change Level */
    command316();

    /* Change Parameter */
    command317();

    /* Change Skill */
    command318();

    /* Change Equipment */
    command319();

    /* Change Name */
    command320();

    /* Change Class */
    command321();

    /* Change Actor Images */
    command322();

    /* Change Vehicle Image */
    command323();

    /* Change Nickname */
    command324();

    /* Change Profile */
    command325();

    /* Change TP */
    command326();

    /* Change Enemy HP */
    command331();

    /* Change Enemy MP */
    command332();

    /* Change Enemy State */
    command333();

    /* Enemy Recover All */
    command334();

    /* Enemy Appear */
    command335();

    /* Enemy Transform */
    command336();

    /* Show Battle Animation */
    command337();

    /* Force Action */
    command339();

    /* Abort Battle */
    command340();

    /* Change Enemy TP */
    command342();

    /* Open Menu Screen */
    command351();

    /* Open Save Screen */
    command352();

    /* Game Over */
    command353();

    /* Return to Title Screen */
    command354();

    /* Script */
    command355();

    /* Plugin Command */
    command356();

    /* When [**] */
    command402();

    /* When Cancel */
    command403();

    /* Else */
    command411();

    /* Repeat Above */
    command413();

    /* If Win */
    command601();

    /* If Escape */
    command602();

    /* If Lose */
    command603();
    currentCommand();
    eventId();
    executeCommand();
    fadeSpeed();
    gameDataOperand(type, param1, param2);
    initialize(depth?);
    isOnCurrentMap();
    isRunning();
    iterateActorEx(param1, param2, callback);
    iterateActorId(param, callback);
    iterateActorIndex(param, callback);
    iterateBattler(param1, param2, callback);
    iterateEnemyIndex(param, callback);
    jumpTo(index);
    nextEventCode();
    operateValue(operation, operandType, operand);
    operateVariable(variableId, operationType, value);
    pluginCommand(command, args);
    setup(list, eventId);
    setupChild(list, eventId);
    setupChoices(params);
    setupItemChoice(params);
    setupNumInput(params);
    setupReservedCommonEvent();
    setWaitMode(waitMode);
    skipBranch();
    terminate();
    update();
    updateChild();
    updateWait();
    updateWaitCount();
    updateWaitMode();
    videoFileExt();
    wait(duration);
}
